extension Set: SetAlgebraType {}

/// insert
public func +=
<Set: SetAlgebraType>(
	inout set: Set,
	element: Set.Element
) {
	set.insert(element)
}

/// remove
public func -=
<Set: SetAlgebraType>(
	inout set: Set,
	element: Set.Element
) {
	set.remove(element)
}

/// intersect
///
///- Remark:
///  1. control-command-space
///  2. "interse"
public func âˆ©
<Set: SetAlgebraType>(
	ğŸ’°0: Set,
	ğŸ’°1: Set
) -> Set {
	return ğŸ’°0.intersect(ğŸ’°1)
}

/// intersect "in place"
///
///- Remark:
///  1. control-command-space
///  2. "interse"
public func âˆ©=
<Set: SetAlgebraType>(
	inout ğŸ’°0: Set,
	ğŸ’°1: Set
) {
	ğŸ’°0.intersectInPlace(ğŸ’°1)
}

/// union
///
///- Remark:
///  1. control-command-space
///  2. "unio"
public func âˆª
<Set: SetAlgebraType>(
	ğŸ’°0: Set,
	ğŸ’°1: Set
) -> Set {
	return ğŸ’°0.union(ğŸ’°1)
}

/// union "in place"
///
///- Remark:
///  1. control-command-space
///  2. "unio"
public func âˆª=
<Set: SetAlgebraType>(
	inout ğŸ’°0: Set,
	ğŸ’°1: Set
) {
	ğŸ’°0.unionInPlace(ğŸ’°1)
}