/*:
## Eventsâ€¦
â€¦are three-part codey bits:
1. transmitter of arguments (ğŸ“¡)
2. signal, which is those arguments
3. receiver of the signal, whose signature matches the signal (ğŸ“»)

The name of events will typically be past tense, to denote that they *just* happened. Emoji come after the name, to denote whether they are broadcasters or receivers.
*/

struct Transmitter {
   static var thingHappenedğŸ“»: (Int -> ())?
   
   // Normally this would only be called from within a Transmitter.
   func thingHappenedğŸ“¡(int: Int) {Transmitter.thingHappenedğŸ“»?(int)}
}

struct Receiver {
   init() {Transmitter.thingHappenedğŸ“» = thingHappenedğŸ“»}
   func thingHappenedğŸ“»(int: Int) {print(int)}
}

Receiver()
Transmitter().thingHappenedğŸ“¡(Int.max)
/*:
### Rationale for these Emoji
* ğŸ“¡: An event is a signal being transmitted.
* ğŸ“»: A radio receives a signal and does something meaningful with it.
### Pronunciation
* ğŸ“¡: Say "transmit" before the English. It's backwards but easier to work with the autocompletion this way.
* ğŸ“»: Say "receive" before the English. 
### Possibilities
* ğŸ“¡s might be functions or `MultiClosure`s.
* ğŸ“»s might be functions, closures, or `EquatableClosure`s.

Use the simplest thing that works, in each case.
*/
