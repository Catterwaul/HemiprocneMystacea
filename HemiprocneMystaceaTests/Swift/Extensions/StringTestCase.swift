import HM
import XCTest

final class StringTestCase: XCTestCase {
	func test_after() {
		XCTAssertEqual(
			"chunky skunky".after("s"),
			"kunky"
		)
		XCTAssertNil(
			"aaabbbccc".after("z")
		)
	}
	
	func test_split() {
		let string = "boo, gee,rye"
		XCTAssertEqual(
			string.split(by: ","),
			[	"boo",
				" gee",
				"rye"
			]
		)
	}
	
	func test_upTo() {
		XCTAssertEqual(
			"glorb14prawn".upTo("1"),
			"glorb"
		)
		
		XCTAssertEqual(
			"glorb14prawn".upTo(
				"1",
				characterIsIncluded: true
			),
			"glorb1"
		)
		
		XCTAssertNil(
			"boogalawncare".upTo("z")
		)
	}
	
	func test_without() {
		let rabbitsAndEars = "游놆游낺游냟游녝游꺟"
		
		XCTAssertNil(
			rabbitsAndEars.without(prefix: "游냟")
		)
		
		XCTAssertEqual(
			rabbitsAndEars.without(prefix: "游놆游낺"),
			"游냟游녝游꺟"
		)
		
		XCTAssertNil(
			rabbitsAndEars.without(suffix: "游냟")
		)
		
		XCTAssertEqual(
			rabbitsAndEars.without(suffix: "游꺟"),
			"游놆游낺游냟游녝"
		)
	}
	
//MARK: Operators
	func test_minus() {
		XCTAssertEqual(
			" 123游낼Boodee Bop! 123游낼" - " 123游낼",
			"Boodee Bop!"
		)
	}
	
	func test_minusWithSequence() {
		XCTAssertEqual(
			" 123游낼Boodee Bop! 123游낼" - [" 123游낼", "Bo"],
			"odee p!"
		)
	}
	
//MARK: Sequences of Strings
	func test_concatenated() {
		XCTAssertEqual(
			[   "a",
			    "bc",
			    "d"
			].concatenated,
			"abcd"
		)
	}
}
