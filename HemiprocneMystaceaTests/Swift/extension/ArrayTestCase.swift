import HM
import XCTest

final class ArrayTestCase: XCTestCase {
  func test_permutations() {
    XCTAssertEqual(
      Array([0, 1, 2, 3].permutations),
      [ [0, 1, 2, 3],
        [0, 1, 3, 2],
        [0, 2, 3, 1],
        [0, 2, 1, 3],
        [0, 3, 1, 2],
        [0, 3, 2, 1],

        [1, 2, 3, 0],
        [1, 2, 0, 3],
        [1, 3, 0, 2],
        [1, 3, 2, 0],
        [1, 0, 2, 3],
        [1, 0, 3, 2],

        [2, 3, 0, 1],
        [2, 3, 1, 0],
        [2, 0, 1, 3],
        [2, 0, 3, 1],
        [2, 1, 3, 0],
        [2, 1, 0, 3],

        [3, 0, 1, 2],
        [3, 0, 2, 1],
        [3, 1, 2, 0],
        [3, 1, 0, 2],
        [3, 2, 0, 1],
        [3, 2, 1, 0]
      ]
    )

    XCTAssertEqual(
      Array(["A", "B", "C"].permutations),
      [ ["A", "B", "C"],
        ["A", "C", "B"],

        ["B", "C", "A"],
        ["B", "A", "C"],

        ["C", "A", "B"],
        ["C", "B", "A"]
      ]
    )

    XCTAssertEqual(
      Array("❤️💛💚💙💜").permutations.map {
        String($0)
      },
      [ "❤️💛💚💙💜",
        "❤️💛💚💜💙",
        "❤️💛💙💜💚",
        "❤️💛💙💚💜",
        "❤️💛💜💚💙",
        "❤️💛💜💙💚",
        "❤️💚💙💜💛",
        "❤️💚💙💛💜",
        "❤️💚💜💛💙",
        "❤️💚💜💙💛",
        "❤️💚💛💙💜",
        "❤️💚💛💜💙",
        "❤️💙💜💛💚",
        "❤️💙💜💚💛",
        "❤️💙💛💚💜",
        "❤️💙💛💜💚",
        "❤️💙💚💜💛",
        "❤️💙💚💛💜",
        "❤️💜💛💚💙",
        "❤️💜💛💙💚",
        "❤️💜💚💙💛",
        "❤️💜💚💛💙",
        "❤️💜💙💛💚",
        "❤️💜💙💚💛",

        "💛💚💙💜❤️",
        "💛💚💙❤️💜",
        "💛💚💜❤️💙",
        "💛💚💜💙❤️",
        "💛💚❤️💙💜",
        "💛💚❤️💜💙",
        "💛💙💜❤️💚",
        "💛💙💜💚❤️",
        "💛💙❤️💚💜",
        "💛💙❤️💜💚",
        "💛💙💚💜❤️",
        "💛💙💚❤️💜",
        "💛💜❤️💚💙",
        "💛💜❤️💙💚",
        "💛💜💚💙❤️",
        "💛💜💚❤️💙",
        "💛💜💙❤️💚",
        "💛💜💙💚❤️",
        "💛❤️💚💙💜",
        "💛❤️💚💜💙",
        "💛❤️💙💜💚",
        "💛❤️💙💚💜",
        "💛❤️💜💚💙",
        "💛❤️💜💙💚",

        "💚💙💜❤️💛",
        "💚💙💜💛❤️",
        "💚💙❤️💛💜",
        "💚💙❤️💜💛",
        "💚💙💛💜❤️",
        "💚💙💛❤️💜",
        "💚💜❤️💛💙",
        "💚💜❤️💙💛",
        "💚💜💛💙❤️",
        "💚💜💛❤️💙",
        "💚💜💙❤️💛",
        "💚💜💙💛❤️",
        "💚❤️💛💙💜",
        "💚❤️💛💜💙",
        "💚❤️💙💜💛",
        "💚❤️💙💛💜",
        "💚❤️💜💛💙",
        "💚❤️💜💙💛",
        "💚💛💙💜❤️",
        "💚💛💙❤️💜",
        "💚💛💜❤️💙",
        "💚💛💜💙❤️",
        "💚💛❤️💙💜",
        "💚💛❤️💜💙",

        "💙💜❤️💛💚",
        "💙💜❤️💚💛",
        "💙💜💛💚❤️",
        "💙💜💛❤️💚",
        "💙💜💚❤️💛",
        "💙💜💚💛❤️",
        "💙❤️💛💚💜",
        "💙❤️💛💜💚",
        "💙❤️💚💜💛",
        "💙❤️💚💛💜",
        "💙❤️💜💛💚",
        "💙❤️💜💚💛",
        "💙💛💚💜❤️",
        "💙💛💚❤️💜",
        "💙💛💜❤️💚",
        "💙💛💜💚❤️",
        "💙💛❤️💚💜",
        "💙💛❤️💜💚",
        "💙💚💜❤️💛",
        "💙💚💜💛❤️",
        "💙💚❤️💛💜",
        "💙💚❤️💜💛",
        "💙💚💛💜❤️",
        "💙💚💛❤️💜",

        "💜❤️💛💚💙",
        "💜❤️💛💙💚",
        "💜❤️💚💙💛",
        "💜❤️💚💛💙",
        "💜❤️💙💛💚",
        "💜❤️💙💚💛",
        "💜💛💚💙❤️",
        "💜💛💚❤️💙",
        "💜💛💙❤️💚",
        "💜💛💙💚❤️",
        "💜💛❤️💚💙",
        "💜💛❤️💙💚",
        "💜💚💙❤️💛",
        "💜💚💙💛❤️",
        "💜💚❤️💛💙",
        "💜💚❤️💙💛",
        "💜💚💛💙❤️",
        "💜💚💛❤️💙",
        "💜💙❤️💛💚",
        "💜💙❤️💚💛",
        "💜💙💛💚❤️",
        "💜💙💛❤️💚",
        "💜💙💚❤️💛",
        "💜💙💚💛❤️"
      ]
    )
  }

  func test_splitInHalf() {
    let intsSplitInHalf = [1, 2, 3, 4, 5].splitInHalf
    
    XCTAssertEqual(intsSplitInHalf[0], [1, 2])
    XCTAssertEqual(intsSplitInHalf[1], [3, 4, 5])
  }
  
  func test_getElement() throws {
    XCTAssertThrowsError( try ["🐾", "🥝"].getElement(index: 2) )
    
    let optionals = [1, 2, nil]
    
    do {
      let optional1 = try optionals.getElement(index: 0)
      XCTAssertEqual(optional1, 1)
    }
    
    let outOfBoundsIndex = optionals.count
    do {
      _ = try optionals.getElement(index: outOfBoundsIndex)
      XCTFail()
    }
    catch let error as Array<Int?>.OutOfBoundsError {
      XCTAssertEqual(error.index, outOfBoundsIndex)
    }
  }
}
