import HM
import XCTest

final class PermutationsTestCase: XCTestCase {
  func test_permutations() {
    XCTAssertEqual(
      Array(Permutations([0, 1, 2, 3])),
      [ [0, 1, 2, 3],
        [0, 1, 3, 2],
        [0, 2, 3, 1],
        [0, 2, 1, 3],
        [0, 3, 1, 2],
        [0, 3, 2, 1],

        [1, 2, 3, 0],
        [1, 2, 0, 3],
        [1, 3, 0, 2],
        [1, 3, 2, 0],
        [1, 0, 2, 3],
        [1, 0, 3, 2],

        [2, 3, 0, 1],
        [2, 3, 1, 0],
        [2, 0, 1, 3],
        [2, 0, 3, 1],
        [2, 1, 3, 0],
        [2, 1, 0, 3],

        [3, 0, 1, 2],
        [3, 0, 2, 1],
        [3, 1, 2, 0],
        [3, 1, 0, 2],
        [3, 2, 0, 1],
        [3, 2, 1, 0]
      ]
    )

    XCTAssertEqual(
      Array( Permutations(["A", "B", "C"]) ),
      [ ["A", "B", "C"],
        ["A", "C", "B"],

        ["B", "C", "A"],
        ["B", "A", "C"],

        ["C", "A", "B"],
        ["C", "B", "A"]
      ]
    )

    XCTAssertEqual(
      Permutations("❤️💛💚💙💜").map { String($0) },
      [ "❤️💛💚💙💜",
        "❤️💛💚💜💙",
        "❤️💛💙💜💚",
        "❤️💛💙💚💜",
        "❤️💛💜💚💙",
        "❤️💛💜💙💚",
        "❤️💚💙💜💛",
        "❤️💚💙💛💜",
        "❤️💚💜💛💙",
        "❤️💚💜💙💛",
        "❤️💚💛💙💜",
        "❤️💚💛💜💙",
        "❤️💙💜💛💚",
        "❤️💙💜💚💛",
        "❤️💙💛💚💜",
        "❤️💙💛💜💚",
        "❤️💙💚💜💛",
        "❤️💙💚💛💜",
        "❤️💜💛💚💙",
        "❤️💜💛💙💚",
        "❤️💜💚💙💛",
        "❤️💜💚💛💙",
        "❤️💜💙💛💚",
        "❤️💜💙💚💛",

        "💛💚💙💜❤️",
        "💛💚💙❤️💜",
        "💛💚💜❤️💙",
        "💛💚💜💙❤️",
        "💛💚❤️💙💜",
        "💛💚❤️💜💙",
        "💛💙💜❤️💚",
        "💛💙💜💚❤️",
        "💛💙❤️💚💜",
        "💛💙❤️💜💚",
        "💛💙💚💜❤️",
        "💛💙💚❤️💜",
        "💛💜❤️💚💙",
        "💛💜❤️💙💚",
        "💛💜💚💙❤️",
        "💛💜💚❤️💙",
        "💛💜💙❤️💚",
        "💛💜💙💚❤️",
        "💛❤️💚💙💜",
        "💛❤️💚💜💙",
        "💛❤️💙💜💚",
        "💛❤️💙💚💜",
        "💛❤️💜💚💙",
        "💛❤️💜💙💚",

        "💚💙💜❤️💛",
        "💚💙💜💛❤️",
        "💚💙❤️💛💜",
        "💚💙❤️💜💛",
        "💚💙💛💜❤️",
        "💚💙💛❤️💜",
        "💚💜❤️💛💙",
        "💚💜❤️💙💛",
        "💚💜💛💙❤️",
        "💚💜💛❤️💙",
        "💚💜💙❤️💛",
        "💚💜💙💛❤️",
        "💚❤️💛💙💜",
        "💚❤️💛💜💙",
        "💚❤️💙💜💛",
        "💚❤️💙💛💜",
        "💚❤️💜💛💙",
        "💚❤️💜💙💛",
        "💚💛💙💜❤️",
        "💚💛💙❤️💜",
        "💚💛💜❤️💙",
        "💚💛💜💙❤️",
        "💚💛❤️💙💜",
        "💚💛❤️💜💙",

        "💙💜❤️💛💚",
        "💙💜❤️💚💛",
        "💙💜💛💚❤️",
        "💙💜💛❤️💚",
        "💙💜💚❤️💛",
        "💙💜💚💛❤️",
        "💙❤️💛💚💜",
        "💙❤️💛💜💚",
        "💙❤️💚💜💛",
        "💙❤️💚💛💜",
        "💙❤️💜💛💚",
        "💙❤️💜💚💛",
        "💙💛💚💜❤️",
        "💙💛💚❤️💜",
        "💙💛💜❤️💚",
        "💙💛💜💚❤️",
        "💙💛❤️💚💜",
        "💙💛❤️💜💚",
        "💙💚💜❤️💛",
        "💙💚💜💛❤️",
        "💙💚❤️💛💜",
        "💙💚❤️💜💛",
        "💙💚💛💜❤️",
        "💙💚💛❤️💜",

        "💜❤️💛💚💙",
        "💜❤️💛💙💚",
        "💜❤️💚💙💛",
        "💜❤️💚💛💙",
        "💜❤️💙💛💚",
        "💜❤️💙💚💛",
        "💜💛💚💙❤️",
        "💜💛💚❤️💙",
        "💜💛💙❤️💚",
        "💜💛💙💚❤️",
        "💜💛❤️💚💙",
        "💜💛❤️💙💚",
        "💜💚💙❤️💛",
        "💜💚💙💛❤️",
        "💜💚❤️💛💙",
        "💜💚❤️💙💛",
        "💜💚💛💙❤️",
        "💜💚💛❤️💙",
        "💜💙❤️💛💚",
        "💜💙❤️💚💛",
        "💜💙💛💚❤️",
        "💜💙💛❤️💚",
        "💜💙💚❤️💛",
        "💜💙💚💛❤️"
      ]
    )
  }
}
